{"version":3,"sources":["components/ChoiceButton.js","components/InitialGameState.js","components/Loading.js","components/Error.js","components/InputForm.js","socket.js","containers/Home.js","components/icons/X.js","components/icons/O.js","components/icons/index.js","components/Square.js","components/Wait.js","components/Status.js","components/PlayAgain.js","components/Score.js","components/ScoreBoard.js","containers/Game.js","AppRouter.js","index.js"],"names":["ChoiceButton","type","label","onClick","className","InitialGameState","onChoice","Loading","loading","style","display","userSelect","Error","message","opacity","InputForm","stepBack","onSubmit","onTyping","newGame","name","room","placeholder","onChange","value","choice","socket","getSocket","socketIOClient","Home","React","useState","step","setStep","setName","setNewGame","setRoom","setLoading","serverConfirmed","setServerConfirmed","error","setError","errorMessage","setErrorMessage","onInitialGameStateButtonClicked","onUserWritingSomething","event","target","displayError","setTimeout","onUserSubmitHisForm","emit","console","log","emitJoiningEvent","useEffect","on","to","getHomeByGameState","beforeStyle","background","width","height","position","transform","afterStyle","X","borderRadius","O","Icon","props","end","turn","player","Square","bind","id","Wait","textArea","useRef","ref","readOnly","current","select","document","execCommand","Status","PlayAgain","visibility","Score","score","ScoreBoard","data","player1","player2","Game","handleClick","index","state","game","piece","playAgainRequest","Array","fill","statusMessage","currentPlayerScore","opponentPlayer","waiting","joinError","socketID","this","io","qs","parse","window","location","search","ignoreQueryPrefix","setState","gameState","players","gameStart","handleUpdate","handleWin","handleDraw","handleRestart","opponent","filter","setBoard","setTurn","setMessage","playerScore","opponentScore","i","squareArray","newSquare","renderSquare","push","Component","AppRouter","path","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.155618f8.chunk.js","sourcesContent":["import React from 'react';\n\nconst ChoiceButton = ({ type, label, onClick }) => { // encore un passage de propriétés ;)\n    return (\n        <button className={`btn btn-${type}`} onClick={onClick}>{label}</button>\n    );\n}\n\nexport default ChoiceButton;","import React from 'react';\nimport ChoiceButton from './ChoiceButton' // Un nouveau composant à créer plus tard !\n\nconst InitialGameState = ({ onChoice }) => { // On voit ici un passage de propriétés à notre composant, si tu regardes bien dans Home, on a écrit onChoice={() => {}} (une fonction fléchée vide)... Et on retrouve ce onChoice ici !\n    return (\n        <>\n            <div className='choice-container'>\n                <ChoiceButton onClick={() => onChoice('new')} type='primary' label='Start New Game' />\n                <ChoiceButton onClick={() => onChoice('join')} type='secondary' label='Join A Game' />\n            </div>\n        </>\n    );\n}\n\nexport default InitialGameState;","import React from 'react';\n\nconst Loading = ({ loading }) => {\n    return (\n        <div className=\"loader\" style={{ display: loading ? 'flex' : 'none' }}>\n            <i className=\"fa fa-spinner fa-pulse fa-4x fa-fw\"></i>\n            <span style={{ userSelect: 'none' }}>Loading...</span>\n        </div>\n    );\n}\n\nexport default Loading;","import React from 'react';\n\nconst Error = ({ display, message }) => {\n    return (\n        <div className=\"error\" style={{ opacity: display ? '100%' : '0' }}>\n            <h1 className=\"error-message\">\n                {message}\n            </h1>\n        </div>\n    );\n}\n\n\n\nexport default Error;","import React from 'react';\nimport ChoiceButton from './ChoiceButton'\n\nconst InputForm = ({ stepBack, onSubmit, onTyping, newGame, name, room }) => {\n    if (newGame) {\n        return (\n            <div className=\"input-container\">\n                <input\n                    name='name'\n                    placeholder='Your Name...'\n                    onChange={onTyping}\n                    value={name}\n                />\n                <div className='nav-container'>\n                    <ChoiceButton type='nav-back' choice='back' onClick={stepBack} label='Back' />\n                    <ChoiceButton type='nav-forward' choice='submit' onClick={onSubmit} label=\"Let's Go\" />\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"input-container\">\n                <input\n                    name='name'\n                    placeholder='Your Name...'\n                    onChange={onTyping}\n                    value={name}\n                />\n                <input\n                    name='room'\n                    placeholder='Room ID...'\n                    onChange={onTyping}\n                    value={room}\n                />\n                <div className='nav-container'>\n                    <ChoiceButton type='nav-back' choice='back' onClick={stepBack} label='Back' />\n                    <ChoiceButton type='nav-forward' choice='submit' onClick={onSubmit} label=\"Let's Go\" />\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default InputForm;","import socketIOClient from 'socket.io-client'\nconst ENDPOINT = 'ws://localhost:4000';\n\nlet socket = null;\n\nexport const initializeSocketConection = () => {\n    return getSocket();\n}\nexport const getSocket = () => {\n    if (socket) {\n        return socket;\n    }\n    socket = socketIOClient(ENDPOINT);\n    return socket;\n}\nexport const disconnectSocket = () => {\n    socket.disconnect();\n    socket = null;\n}\n\nexport const emitNewGameEvent = () => {\n    socket.emit('newGame');\n}\n\nexport const emitJoiningEvent = (room) => {\n    socket.emit('joining', { room })\n}","import React from 'react';\nimport { Redirect } from 'react-router-dom'\n\nimport InitialGameState from '../components/InitialGameState';\nimport Loading from '../components/Loading';\nimport Error from '../components/Error';\nimport InputForm from '../components/InputForm';\n\nimport { initializeSocketConection, disconnectSocket, emitJoiningEvent, emitNewGameEvent} from '../socket';\n\nconst Home = () => {\n    const [step, setStep] = React.useState(1); // Étape du jeu, on considère l'étape 1 comme étant l'état initial...\n    const [name, setName] = React.useState(''); // Nom du joueur\n    const [newGame, setNewGame] = React.useState(null); // Est-ce qu'on lance un nouveau jeu ?\n    const [room, setRoom] = React.useState(''); // La salle de jeu\n    const [loading, setLoading] = React.useState(false); // Est-ce que mon jeu est entrain de charger qqch ?\n    const [serverConfirmed, setServerConfirmed] = React.useState(false); // Est-ce que le serveur a confirmé notre participation ?\n    const [error, setError] = React.useState(false); // Est-ce qu'il y a eu une erreur ?\n    const [errorMessage, setErrorMessage] = React.useState(''); // Le message d'erreur\n\n    const stepBack = () => {\n        setStep(step - 1);\n    }\n\n    const stepForward = () => {\n        setStep(step + 1);\n    }\n\n    const onInitialGameStateButtonClicked = (choice) => {\n        const gameChoice = choice === 'new' ? true : false; // cette notation s'appelle une ternaire et correspond à un IF/ELSE, écrit différemment\n        setNewGame(gameChoice); // Est-ce que l'on veut lancer une nouvelle partie ou la rejoindre ?\n        stepForward(); // On avance notre étape du jeu !\n    };\n\n    const onUserWritingSomething = (event) => { // cette fonction prend en paramètre un événement\n        const target = event.target.name; // On récupère l'émetteur de l'event\n        const value = event.target.value; // Et la valeur associée\n        if (target === 'name') { // Si l'émetteur a pour nom 'name'\n            setName(value); // Alors on change le nom dans le state...\n        } else if (target === 'room') { // Si l'émetteur a pour nom 'room'\n            setRoom(value); // Alors on change la room dans le state...\n        }\n    }\n\n    const isMyFormValid = () => {\n        if (newGame) {\n            return name !== '';\n        } else {\n            return name !== '' && room !== '';\n        }\n    }\n\n    const displayError = (message) => {\n        setError(true); // On change notre state pour indiquer qu'une erreur est présente...\n        setErrorMessage(message); // Et on indique également le message d'erreur\n        setLoading(false); // L'application ne charge plus\n        setTimeout(() => {\n            setError(false);\n            setErrorMessage('');\n        }, 3000)\n    }\n\n    const onUserSubmitHisForm = () => {\n        setLoading(true); // On passe l'application dans un état Loading\n        if (isMyFormValid()) { // est-ce que mon formulaire est valide ?\n            if (newGame) { // Si on demandait à faire une nouvelle partie\n                // TODO Appeler le serveur et lui demander de créer une partie !\n                emitNewGameEvent()\n                console.log('Je demande à appeler le serveur pour créer une nouvelle partie !')\n            } else {\n                // TODO Appeler le serveur et lui demander de rejoindre une partie !\n                console.log('Je demande à appeler le serveur pour rejoindre une nouvelle partie !')\n                emitJoiningEvent(room);\n            }\n        } else { // Oops... Le formulaire n'est pas valide !\n            displayError(newGame ? 'Please fill out your name' : 'Please fill out your name and room id') // On demande à afficher un message d'erreur.\n        }\n    }\n\n    React.useEffect(() => {\n        let socket = initializeSocketConection();\n        socket.on('newGameCreated', (room) => {\n            setRoom(room);\n            setServerConfirmed(true);\n        })\n        socket.on('joinConfirmed', () => {\n            setServerConfirmed(true);\n        })\n        socket.on('errorMessage', (message) => displayError(message));\n        return () => {socket = null};\n    }, []);\n\n    const getHomeByGameState = () => {\n        if (serverConfirmed) { // Si le serveur à confirmé notre participation\n            return (// alors on est redirigé dans une partie\n                <Redirect to={`/game?room=${room}&name=${name}`} />\n            )\n        } else { // Si ce n'est pas le cas\n            switch (step) {\n                case (1): // Et que l'on se trouve dans l'état de jeu initial (1)\n                    return ( // On affiche les éléments de l'état initial du jeu (nouvelle partie ou rejoindre)\n                        <InitialGameState onChoice={onInitialGameStateButtonClicked} />\n                    );\n                case (2):\n                    return (\n                        <>\n                            <Loading loading={loading} />\n                            <Error display={error} message={errorMessage} />\n                            <InputForm\n                                stepBack={stepBack}\n                                onSubmit={onUserSubmitHisForm}\n                                onTyping={onUserWritingSomething}\n                                newGame={newGame}\n                                name={name}\n                                room={room} />\n                        </>\n                    );\n                default: // Le cas par défaut est de ne rien retourner.\n                    return null\n            }\n        }\n    }\n    \n    return getHomeByGameState(); // On appelle la fonction déclarée plus haut qui va nous retourner des éléments à afficher...\n}\n\nexport default Home;","import React from 'react';\n\nconst beforeStyle ={\n    background: 'white',\n    width: '93%',\n    height: '13%',\n    position: 'absolute',\n    transform: 'rotate(45deg)'\n}\nconst afterStyle ={\n    background: 'white',\n    width: '93%',\n    height: '13%',\n    position: 'absolute',\n    transform: 'rotate(-45deg)'\n}\n\n\nconst X = () => {\n    return (\n        <>\n            <div className=\"before\" style={beforeStyle}></div>\n            <div className = \"after\" style={afterStyle}></div>\n        </>\n    );\n}\n\nexport default X;\n","import React from 'react';\n\nconst beforeStyle ={\n    background: 'white',\n    width: '90%',\n    height: '90%',\n    position: 'absolute',\n    borderRadius: '50%',\n}\nconst afterStyle ={\n    background: 'var(--dark-blue)',\n    width: '70%',\n    height: '70%',\n    position: 'absolute',\n    borderRadius: '50%',\n}\n\n\nconst O = () => {\n    return (\n        <>\n            <div className=\"before\" style={beforeStyle}></div>\n            <div className = \"after\" style={afterStyle}></div>\n        </>\n    );\n}\n\nexport default O;\n","import React from 'react';\nimport X from './X'\nimport O from './O'\nconst Icon = (props) => {\n    switch(props.value){\n        case 'X':\n            return <X />\n        case 'O':\n            return <O />\n        default:\n            if (props.end || !props.turn){\n                return <div></div>\n            }else{\n                switch(props.player){\n                    case 'X':\n                        return <div className='placeHolder'><X /></div>\n                    case 'O':\n                        return <div className='placeHolder'><O /></div>\n                    default:\n                        return <div></div>\n                }   \n            }\n    }\n}\n\nexport default Icon;\n","import React from 'react';\nimport Icon from './icons'\n\nconst Square = (props) => {\n    return (\n        <div className=\"square\" onClick={props.onClick.bind(this, props.id)}>\n            <Icon {...props} />\n        </div>\n    );\n}\n\nexport default Square;\n","import React, { useRef } from 'react';\n\nconst Wait = ({ room, display }) => {\n    const textArea = useRef(null)\n    const onClick = () => {\n        textArea.current.select()\n        document.execCommand('copy')\n    }\n\n    return (\n        <div className='wait' style={{ display: display ? 'flex' : 'none' }}>\n            <h1 className=\"wait-message\">Waiting for player to connect...</h1>\n            <div className=\"copy\">\n                <h1 className='copy-message'>Give your friend the following room id to connect</h1>\n                <div className='copy-container'>\n                    <input ref={textArea} readOnly={true} value={room} className='copy-area' />\n                    <button className='copy-button' onClick={onClick}>Copy</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Wait;\n","import React from 'react'\n\nexport default function Status({ message }) {\n    return (\n        <div className='status'>\n            <h1 className=\"status-message\">{message}</h1>\n        </div>\n    )\n};","import React from 'react'\n\nexport default function PlayAgain({ end, onClick }) {\n    return (\n        <div className='again-container'>\n            <button className='again-button' onClick={onClick} style={{ visibility: end ? 'visible' : 'hidden', opacity: end ? '1' : '0' }}>Play Again</button>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Score({ name, score }) {\n    return (\n        <div className='score-container'>\n            <h1 className='name'>{name}</h1>\n            <h1 className='score'>{score}</h1>\n        </div>\n    )\n}\n","import React from 'react'\nimport Score from './Score'\n\nexport default function ScoreBoard({ data }) {\n    return (\n        <div className='score-board'>\n            <h1 className=\"score-title\">Score Board</h1>\n            <Score name={data.player1[0]} score={data.player1[1]} />\n            <Score name={data.player2[0]} score={data.player2[1]} />\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\n\nimport Square from '../components/Square';\nimport Wait from '../components/Wait'\nimport Status from '../components/Status'\nimport PlayAgain from '../components/PlayAgain'\nimport ScoreBoard from '../components/ScoreBoard'\n\nimport io from 'socket.io-client'\nimport qs from 'qs'\nconst ENDPOINT = 'ws://localhost:4000'\n\nclass Game extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            game: new Array(9).fill(null),\n            piece: 'X',\n            turn: true,\n            end: false,\n            room: '',\n            statusMessage: '',\n            currentPlayerScore: 0,\n            opponentPlayer: [],\n            //State to check when a new user join\n            waiting: false,\n            joinError: false\n        }\n        this.socketID = null\n    }\n\n    componentDidMount() {\n        //Getting the room and the username information from the url\n        //Then emit to back end to process\n        this.socket = io(ENDPOINT)\n        const { room, name } = qs.parse(window.location.search, {\n            ignoreQueryPrefix: true\n        })\n        this.setState({ room })\n        this.socket.emit('newRoomJoin', { room, name })\n\n        //New user join, logic decide on backend whether to display \n        //the actual game or the wait screen or redirect back to the main page\n        this.socket.on('waiting', () => this.setState({ waiting: true, currentPlayerScore: 0, opponentPlayer: [] }))\n        this.socket.on('starting', ({ gameState, players, turn }) => {\n            this.setState({ waiting: false })\n            this.gameStart(gameState, players, turn)\n        })\n        this.socket.on('joinError', () => this.setState({ joinError: true }))\n\n        //Listening to the assignment of piece store the piece along with the in state\n        //socket id in local socketID variable\n        this.socket.on('pieceAssignment', ({ piece, id }) => {\n            this.setState({ piece: piece })\n            this.socketID = id\n        })\n\n        //Game play logic events\n        this.socket.on('update', ({ gameState, turn }) => this.handleUpdate(gameState, turn))\n        this.socket.on('winner', ({ gameState, id }) => this.handleWin(id, gameState))\n        this.socket.on('draw', ({ gameState }) => this.handleDraw(gameState))\n\n        this.socket.on('restart', ({ gameState, turn }) => this.handleRestart(gameState, turn))\n    }\n\n    //Setting the states to start a game when new user join\n    gameStart(gameState, players, turn) {\n        const opponent = players.filter(([id, name]) => id !== this.socketID)[0][1]\n        this.setState({ opponentPlayer: [opponent, 0], end: false })\n        this.setBoard(gameState)\n        this.setTurn(turn)\n        this.setMessage()\n    }\n\n    //When some one make a move, emit the event to the back end for handling\n    handleClick = (index) => {\n        const { game, piece, end, turn, room } = this.state\n        if (!game[index] && !end && turn) {\n            this.socket.emit('move', { room, piece, index })\n        }\n    }\n\n    //Setting the states each move when the game haven't ended (no wins or draw)\n    handleUpdate(gameState, turn) {\n        this.setBoard(gameState)\n        this.setTurn(turn)\n        this.setMessage()\n    }\n\n    //Setting the states when some one wins\n    handleWin(id, gameState) {\n        this.setBoard(gameState)\n        if (this.socketID === id) {\n            const playerScore = this.state.currentPlayerScore + 1\n            this.setState({ currentPlayerScore: playerScore, statusMessage: 'You Win' })\n        } else {\n            const opponentScore = this.state.opponentPlayer[1] + 1\n            const opponent = this.state.opponentPlayer\n            opponent[1] = opponentScore\n            this.setState({ opponentPlayer: opponent, statusMessage: `${this.state.opponentPlayer[0]} Wins` })\n        }\n        this.setState({ end: true })\n    }\n\n    //Setting the states when there is a draw at the end\n    handleDraw(gameState) {\n        this.setBoard(gameState)\n        this.setState({ end: true, statusMessage: 'Draw' })\n    }\n\n    playAgainRequest = () => {\n        this.socket.emit('playAgainRequest', this.state.room)\n    }\n\n    //Handle the restart event from the back end\n    handleRestart(gameState, turn) {\n        this.setBoard(gameState)\n        this.setTurn(turn)\n        this.setMessage()\n        this.setState({ end: false })\n    }\n\n    //Some utilities methods to set the states of the board\n\n    setMessage() {\n        const message = this.state.turn ? 'Your Turn' : `${this.state.opponentPlayer[0]}'s Turn`\n        this.setState({ statusMessage: message })\n    }\n\n    setTurn(turn) {\n        if (this.state.piece === turn) {\n            this.setState({ turn: true })\n        } else {\n            this.setState({ turn: false })\n        }\n    }\n\n    setBoard(gameState) {\n        this.setState({ game: gameState })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square key={i} value={this.state.game[i]}\n                player={this.state.piece}\n                end={this.state.end}\n                id={i}\n                onClick={this.handleClick}\n                turn={this.state.turn} />\n        )\n    }\n\n    render() {\n        if (this.state.joinError) {\n            return (\n                <Redirect to={`/`} />\n            )\n        } else {\n            const squareArray = []\n            for (let i = 0; i < 9; i++) {\n                const newSquare = this.renderSquare(i)\n                squareArray.push(newSquare)\n            }\n            return (\n                <>\n                    <Wait display={this.state.waiting} room={this.state.room} />\n                    <Status message={this.state.statusMessage} />\n                    <div className=\"board\">\n                        {squareArray}\n                    </div>\n                    <ScoreBoard data={{ player1: ['You', this.state.currentPlayerScore], player2: [this.state.opponentPlayer[0], this.state.opponentPlayer[1]] }} />\n                    <PlayAgain end={this.state.end} onClick={this.playAgainRequest} />\n                </>\n            )\n        }\n    }\n}\n\n\nexport default Game","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\nimport Home from './containers/Home';\nimport Game from './containers/Game';\n\n\nconst AppRouter = () => (\n    <Router>\n        <Route path='/' exact component={Home} />\n        <Route path='/game' component={Game} />\n    </Router>\n)\n \nexport default AppRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from './AppRouter'\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppRouter />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}